package test.gemerics;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class GenericeSample {
	public void test1() {
		//컬랙션 클래스들은 여러 종류의 클래스 객체들을 저장할 수 있음
		List list = new ArrayList();
		
		list.add(new String("java"));
		list.add(new Book("자바 완성,", "홍길동"));
		list.add(new Date());
		
		System.out.println(list);
		
		//저장된 객체를 하나씩 꺼내서 사용하려고 할 때, 기본적으로 Object 타입으로 추출됨
		//get(index) : Object 반환됨
		for (Object obj : list) {
			//Object 타입의 레퍼런스로는 Object 클래스가 가진 메소드나 필드만 다룰 수 있음
			//toString(), equals(), clone(), hashCode() 메소드만 사용할 수 있다.
			//후손클래스들이 오버라이딩한 경우에는 실행시 오버라이딩된 후손쪽 메소드로 연결이 바뀌면서 실행됨
			System.out.println(obj/*.toString()*/);
			
			//만약, 각 후손클래스가 가진 멤버를 사용하려면 Object 레퍼런스로는 다룰 수 없음
			//obj.toUpperCase(); //String 클래스의 대문자로 변환 메소드임 =>에러발생
			//해결 방법은 Object 레퍼런스를 각 후손 클래스 타입으로 형변환해야 함
			//다운 캐스팅시에 래퍼런스가 참조하는 인스턴스의 타입을 확인하고 형변환 할 필요가 있음
			//=>래퍼런스 instanceof 클래스타입
			if (obj instanceof String) {
				String s = (String)obj;
				System.out.println(s + " => "+ s.toUpperCase());
				//코드축약
				System.out.println(((String)obj).toUpperCase());
				
			}
			if (obj instanceof Book) {
				System.out.println(((Book)obj).getTitle()+", "+((Book)obj).getAuthor());
			}
			if (obj instanceof Date) {
				System.out.println(new SimpleDateFormat("yyyy'년' MM'월' dd'일' E").format((Date)obj));
			}
		}
	}
}

class Book{
	private String title;
	private String author;
	
	public Book() {}

	public Book(String title, String author) {
		this.title = title;
		this.author = author;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getAuthor() {
		return author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Override
	public String toString() {
		return "Book [title=" + title + ", author=" + author + "]";
	}
	
	
}