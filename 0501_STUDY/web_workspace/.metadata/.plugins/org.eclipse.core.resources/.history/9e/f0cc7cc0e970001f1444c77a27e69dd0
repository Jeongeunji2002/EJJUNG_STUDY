<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marker Drawing and Deletion</title>
    <style>
        canvas {
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <canvas id="canvas" width="800" height="600"></canvas>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        let markers = [];

        // Draw markers
        function drawMarkers() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            markers.forEach((marker, index) => {
                ctx.arc(marker.x, marker.y, 5, 0, Math.PI * 2);
                ctx.fillStyle = 'blue';
                ctx.fill();
                ctx.strokeStyle = 'black';
                ctx.stroke();
                if (index > 0) {
                    ctx.beginPath();
                    ctx.moveTo(markers[index - 1].x, markers[index - 1].y);
                    ctx.lineTo(marker.x, marker.y);
                    ctx.strokeStyle = 'black';
                    ctx.stroke();
                }
            });
            if (markers.length > 1) {
                ctx.beginPath();
                ctx.moveTo(markers[markers.length - 1].x, markers[markers.length - 1].y);
                ctx.lineTo(markers[0].x, markers[0].y);
                ctx.strokeStyle = 'black';
                ctx.stroke();
            }
        }

        // Add marker
        canvas.addEventListener('click', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            if (e.button === 0) { // Left click
                markers.push({ x, y });
                drawMarkers();
            }
        });

        // Delete marker on right-click
        canvas.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            // Find the marker closest to the clicked position
            const radius = 10; // Radius to detect click near a marker
            markers = markers.filter(marker => {
                const distance = Math.sqrt((marker.x - x) ** 2 + (marker.y - y) ** 2);
                return distance > radius;
            });

            drawMarkers();
        });
    </script>
</body>
</html>
